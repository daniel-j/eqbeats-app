// Generated by CoffeeScript 1.6.3
this.App.module('Player', function(Player, App, Backbone, Marionette, $, _) {
  'use strict';
  Player.Layout = Marionette.Layout.extend({
    template: '#player-template',
    className: 'playercontrols',
    regions: {
      controls: '#media-controls',
      time: '#timeElapsed',
      duration: '#timeTotal',
      progress: '#progress-region'
    }
  });
  Player.Controls = Marionette.ItemView.extend({
    template: '#player-controls',
    events: {
      'click #next-track-btn': function() {
        return App.commands.execute("track:play:next");
      },
      'click #prev-track-btn': function() {
        return App.commands.execute("track:play:prev");
      },
      'click #play-pause-track-btn': function() {
        return App.commands.execute("track:toggle:play");
      }
    },
    onRender: function() {
      this.prevBtn = this.$el.find("#prev-track-btn");
      this.playBtn = this.$el.find("#play-pause-track-btn");
      return this.nextBtn = this.$el.find("#next-track-btn");
    },
    modelEvents: {
      'change:isPlaying': 'setPlayState',
      'change:canPlayPause': 'setCanPlayPause',
      'change:canNext': 'setCanNext',
      'change:canPrev': 'setCanPrev'
    },
    setPlayState: function() {
      if (this.model.get('isPlaying')) {
        return this.playBtn.addClass('paused');
      } else {
        return this.playBtn.removeClass('paused');
      }
    },
    setCanPlayPause: function() {
      return this.playBtn.prop('disabled', !this.model.get('canPlayPause'));
    },
    setCanNext: function() {
      return this.nextBtn.prop('disabled', !this.model.get('canNext'));
    },
    setCanPrev: function() {
      return this.prevBtn.prop('disabled', !this.model.get('canPrev'));
    }
  });
  Player.Time = Marionette.ItemView.extend({
    tagName: 'span',
    templateHelpers: {
      formatTime: function(time) {
        return App.request("format:time", time);
      }
    }
  });
  return Player.Progress = Marionette.ItemView.extend({
    template: '#player-progress',
    initialize: function() {
      this.isMouseDown = false;
      $(window).mousemove(this.onMouseMove.bind(this));
      $(window).mouseup(this.onMouseUp.bind(this));
      $(window).blur(this.onMouseUp.bind(this));
      return this.dragRatio = 0;
    },
    onClose: function() {},
    events: {
      'mousedown #progress-song': 'onMouseDown'
    },
    onMouseDown: function(e) {
      if (!this.model.get('canPlayPause')) {
        return;
      }
      this.isMouseDown = true;
      this.dragRatio = 0;
      this.onMouseMove(e);
      return this.progress.addClass('isDragging');
    },
    onMouseMove: function(e) {
      var left, ratio, w, x;
      if (!this.isMouseDown || !this.model.get('canPlayPause')) {
        return;
      }
      left = this.bar.offset().left;
      left += 16;
      w = this.bar.width() - 8;
      x = e.pageX;
      ratio = (x - left) / w;
      ratio = Math.min(1, Math.max(0, ratio));
      this.progress.css({
        width: ratio * 100 + "%"
      });
      return this.dragRatio = ratio;
    },
    onMouseUp: function(e) {
      if (!this.isMouseDown || !this.model.get('canPlayPause') || !this.model.get('duration')) {
        return;
      }
      this.isMouseDown = false;
      this.progress.removeClass('isDragging');
      return App.commands.execute("track:seek", this.dragRatio * this.model.get('duration'));
    },
    onRender: function() {
      this.progress = this.$el.find(".progressbar-progress");
      this.buffered = this.$el.find(".progressbar-loaded");
      return this.bar = this.$el.find("#progress-song");
    },
    modelEvents: {
      'change:time': 'updateProgress',
      'change:duration': 'updateProgress',
      'change:buffered': 'updateBuffered'
    },
    updateProgress: function() {
      var ratio;
      if (this.isMouseDown) {
        return;
      }
      ratio = this.model.get('time') / this.model.get('duration');
      if (isNaN(ratio)) {
        ratio = 0;
      }
      return this.progress.css({
        width: ratio * 100 + "%"
      });
    },
    updateBuffered: function() {
      var ratio;
      ratio = this.model.get('buffered') / this.model.get('duration');
      if (isNaN(ratio)) {
        ratio = 0;
      }
      return this.buffered.css({
        width: ratio * 100 + "%"
      });
    }
  });
});
