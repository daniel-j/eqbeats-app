// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

this.App.module("Components.Loading", function(Loading, App, Backbone, Marionette, $, _) {
  'use strict';
  var _ref;
  Loading.Controller = (function(_super) {
    __extends(Controller, _super);

    function Controller() {
      _ref = Controller.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Controller.prototype.initialize = function(options) {
      var config, loadingView, view;
      view = options.view, config = options.config;
      _.defaults(config, {
        entities: this.getEntities(view)
      });
      loadingView = this.getLoadingView();
      this.show(loadingView);
      return this.showRealView(view, loadingView, config);
    };

    Controller.prototype.showRealView = function(realView, loadingView, config) {
      var _this = this;
      return App.execute("when:fetched", config.entities, function() {
        if (!_this.region || _this.region.currentView !== loadingView) {
          return realView.close();
        }
        return _this.show(realView);
      });
    };

    Controller.prototype.getEntities = function(view) {
      return _.chain(view).pick("model", "collection").toArray().compact().value();
    };

    Controller.prototype.getLoadingView = function() {
      return new Loading.View;
    };

    return Controller;

  })(App.Controllers.Base);
  return App.commands.setHandler("show:loading", function(view, options) {
    return new Loading.Controller({
      view: view,
      region: options.region,
      config: options.loading
    });
  });
});
